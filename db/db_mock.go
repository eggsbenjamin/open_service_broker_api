// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package db is a generated GoMock package.
package db

import (
	sql "database/sql"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockDB is a mock of DB interface
type MockDB struct {
	ctrl     *gomock.Controller
	recorder *MockDBMockRecorder
}

// MockDBMockRecorder is the mock recorder for MockDB
type MockDBMockRecorder struct {
	mock *MockDB
}

// NewMockDB creates a new mock instance
func NewMockDB(ctrl *gomock.Controller) *MockDB {
	mock := &MockDB{ctrl: ctrl}
	mock.recorder = &MockDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDB) EXPECT() *MockDBMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDB) Get(arg0 interface{}, arg1 string, arg2 ...interface{}) error {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockDBMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDB)(nil).Get), varargs...)
}

// Select mocks base method
func (m *MockDB) Select(arg0 interface{}, arg1 string, arg2 ...interface{}) error {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockDBMockRecorder) Select(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDB)(nil).Select), varargs...)
}

// Query mocks base method
func (m *MockDB) Query(arg0 string, arg1 ...interface{}) (Rows, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockDBMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDB)(nil).Query), varargs...)
}

// NamedQuery mocks base method
func (m *MockDB) NamedQuery(arg0 string, arg1 interface{}) (Rows, error) {
	ret := m.ctrl.Call(m, "NamedQuery", arg0, arg1)
	ret0, _ := ret[0].(Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedQuery indicates an expected call of NamedQuery
func (mr *MockDBMockRecorder) NamedQuery(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedQuery", reflect.TypeOf((*MockDB)(nil).NamedQuery), arg0, arg1)
}

// Exec mocks base method
func (m *MockDB) Exec(query string, args ...interface{}) (sql.Result, error) {
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockDBMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDB)(nil).Exec), varargs...)
}

// MockBeginner is a mock of Beginner interface
type MockBeginner struct {
	ctrl     *gomock.Controller
	recorder *MockBeginnerMockRecorder
}

// MockBeginnerMockRecorder is the mock recorder for MockBeginner
type MockBeginnerMockRecorder struct {
	mock *MockBeginner
}

// NewMockBeginner creates a new mock instance
func NewMockBeginner(ctrl *gomock.Controller) *MockBeginner {
	mock := &MockBeginner{ctrl: ctrl}
	mock.recorder = &MockBeginnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBeginner) EXPECT() *MockBeginnerMockRecorder {
	return m.recorder
}

// Begin mocks base method
func (m *MockBeginner) Begin() (DBTxer, error) {
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(DBTxer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockBeginnerMockRecorder) Begin() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockBeginner)(nil).Begin))
}

// MockTxer is a mock of Txer interface
type MockTxer struct {
	ctrl     *gomock.Controller
	recorder *MockTxerMockRecorder
}

// MockTxerMockRecorder is the mock recorder for MockTxer
type MockTxerMockRecorder struct {
	mock *MockTxer
}

// NewMockTxer creates a new mock instance
func NewMockTxer(ctrl *gomock.Controller) *MockTxer {
	mock := &MockTxer{ctrl: ctrl}
	mock.recorder = &MockTxerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxer) EXPECT() *MockTxerMockRecorder {
	return m.recorder
}

// Commit mocks base method
func (m *MockTxer) Commit() error {
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockTxerMockRecorder) Commit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockTxer)(nil).Commit))
}

// Rollback mocks base method
func (m *MockTxer) Rollback() error {
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockTxerMockRecorder) Rollback() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockTxer)(nil).Rollback))
}

// MockDBBeginner is a mock of DBBeginner interface
type MockDBBeginner struct {
	ctrl     *gomock.Controller
	recorder *MockDBBeginnerMockRecorder
}

// MockDBBeginnerMockRecorder is the mock recorder for MockDBBeginner
type MockDBBeginnerMockRecorder struct {
	mock *MockDBBeginner
}

// NewMockDBBeginner creates a new mock instance
func NewMockDBBeginner(ctrl *gomock.Controller) *MockDBBeginner {
	mock := &MockDBBeginner{ctrl: ctrl}
	mock.recorder = &MockDBBeginnerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBBeginner) EXPECT() *MockDBBeginnerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDBBeginner) Get(arg0 interface{}, arg1 string, arg2 ...interface{}) error {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockDBBeginnerMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDBBeginner)(nil).Get), varargs...)
}

// Select mocks base method
func (m *MockDBBeginner) Select(arg0 interface{}, arg1 string, arg2 ...interface{}) error {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockDBBeginnerMockRecorder) Select(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDBBeginner)(nil).Select), varargs...)
}

// Query mocks base method
func (m *MockDBBeginner) Query(arg0 string, arg1 ...interface{}) (Rows, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockDBBeginnerMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDBBeginner)(nil).Query), varargs...)
}

// NamedQuery mocks base method
func (m *MockDBBeginner) NamedQuery(arg0 string, arg1 interface{}) (Rows, error) {
	ret := m.ctrl.Call(m, "NamedQuery", arg0, arg1)
	ret0, _ := ret[0].(Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedQuery indicates an expected call of NamedQuery
func (mr *MockDBBeginnerMockRecorder) NamedQuery(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedQuery", reflect.TypeOf((*MockDBBeginner)(nil).NamedQuery), arg0, arg1)
}

// Exec mocks base method
func (m *MockDBBeginner) Exec(query string, args ...interface{}) (sql.Result, error) {
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockDBBeginnerMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDBBeginner)(nil).Exec), varargs...)
}

// Begin mocks base method
func (m *MockDBBeginner) Begin() (DBTxer, error) {
	ret := m.ctrl.Call(m, "Begin")
	ret0, _ := ret[0].(DBTxer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Begin indicates an expected call of Begin
func (mr *MockDBBeginnerMockRecorder) Begin() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Begin", reflect.TypeOf((*MockDBBeginner)(nil).Begin))
}

// MockDBTxer is a mock of DBTxer interface
type MockDBTxer struct {
	ctrl     *gomock.Controller
	recorder *MockDBTxerMockRecorder
}

// MockDBTxerMockRecorder is the mock recorder for MockDBTxer
type MockDBTxerMockRecorder struct {
	mock *MockDBTxer
}

// NewMockDBTxer creates a new mock instance
func NewMockDBTxer(ctrl *gomock.Controller) *MockDBTxer {
	mock := &MockDBTxer{ctrl: ctrl}
	mock.recorder = &MockDBTxerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockDBTxer) EXPECT() *MockDBTxerMockRecorder {
	return m.recorder
}

// Get mocks base method
func (m *MockDBTxer) Get(arg0 interface{}, arg1 string, arg2 ...interface{}) error {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockDBTxerMockRecorder) Get(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockDBTxer)(nil).Get), varargs...)
}

// Select mocks base method
func (m *MockDBTxer) Select(arg0 interface{}, arg1 string, arg2 ...interface{}) error {
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Select", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Select indicates an expected call of Select
func (mr *MockDBTxerMockRecorder) Select(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Select", reflect.TypeOf((*MockDBTxer)(nil).Select), varargs...)
}

// Query mocks base method
func (m *MockDBTxer) Query(arg0 string, arg1 ...interface{}) (Rows, error) {
	varargs := []interface{}{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Query", varargs...)
	ret0, _ := ret[0].(Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Query indicates an expected call of Query
func (mr *MockDBTxerMockRecorder) Query(arg0 interface{}, arg1 ...interface{}) *gomock.Call {
	varargs := append([]interface{}{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockDBTxer)(nil).Query), varargs...)
}

// NamedQuery mocks base method
func (m *MockDBTxer) NamedQuery(arg0 string, arg1 interface{}) (Rows, error) {
	ret := m.ctrl.Call(m, "NamedQuery", arg0, arg1)
	ret0, _ := ret[0].(Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NamedQuery indicates an expected call of NamedQuery
func (mr *MockDBTxerMockRecorder) NamedQuery(arg0, arg1 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NamedQuery", reflect.TypeOf((*MockDBTxer)(nil).NamedQuery), arg0, arg1)
}

// Exec mocks base method
func (m *MockDBTxer) Exec(query string, args ...interface{}) (sql.Result, error) {
	varargs := []interface{}{query}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Exec", varargs...)
	ret0, _ := ret[0].(sql.Result)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exec indicates an expected call of Exec
func (mr *MockDBTxerMockRecorder) Exec(query interface{}, args ...interface{}) *gomock.Call {
	varargs := append([]interface{}{query}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exec", reflect.TypeOf((*MockDBTxer)(nil).Exec), varargs...)
}

// Commit mocks base method
func (m *MockDBTxer) Commit() error {
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(error)
	return ret0
}

// Commit indicates an expected call of Commit
func (mr *MockDBTxerMockRecorder) Commit() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockDBTxer)(nil).Commit))
}

// Rollback mocks base method
func (m *MockDBTxer) Rollback() error {
	ret := m.ctrl.Call(m, "Rollback")
	ret0, _ := ret[0].(error)
	return ret0
}

// Rollback indicates an expected call of Rollback
func (mr *MockDBTxerMockRecorder) Rollback() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rollback", reflect.TypeOf((*MockDBTxer)(nil).Rollback))
}

// MockRows is a mock of Rows interface
type MockRows struct {
	ctrl     *gomock.Controller
	recorder *MockRowsMockRecorder
}

// MockRowsMockRecorder is the mock recorder for MockRows
type MockRowsMockRecorder struct {
	mock *MockRows
}

// NewMockRows creates a new mock instance
func NewMockRows(ctrl *gomock.Controller) *MockRows {
	mock := &MockRows{ctrl: ctrl}
	mock.recorder = &MockRowsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRows) EXPECT() *MockRowsMockRecorder {
	return m.recorder
}

// Next mocks base method
func (m *MockRows) Next() bool {
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Next indicates an expected call of Next
func (mr *MockRowsMockRecorder) Next() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockRows)(nil).Next))
}

// Scan mocks base method
func (m *MockRows) Scan(arg0 ...interface{}) error {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Scan", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Scan indicates an expected call of Scan
func (mr *MockRowsMockRecorder) Scan(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scan", reflect.TypeOf((*MockRows)(nil).Scan), arg0...)
}

// StructScan mocks base method
func (m *MockRows) StructScan(arg0 interface{}) error {
	ret := m.ctrl.Call(m, "StructScan", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// StructScan indicates an expected call of StructScan
func (mr *MockRowsMockRecorder) StructScan(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StructScan", reflect.TypeOf((*MockRows)(nil).StructScan), arg0)
}

// Err mocks base method
func (m *MockRows) Err() error {
	ret := m.ctrl.Call(m, "Err")
	ret0, _ := ret[0].(error)
	return ret0
}

// Err indicates an expected call of Err
func (mr *MockRowsMockRecorder) Err() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Err", reflect.TypeOf((*MockRows)(nil).Err))
}

// Close mocks base method
func (m *MockRows) Close() error {
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRowsMockRecorder) Close() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRows)(nil).Close))
}
