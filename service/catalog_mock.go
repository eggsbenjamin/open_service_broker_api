// Code generated by MockGen. DO NOT EDIT.
// Source: catalog.go

// Package service is a generated GoMock package.
package service

import (
	models "github.com/eggsbenjamin/open_service_broker_api/models"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockCatalogService is a mock of CatalogService interface
type MockCatalogService struct {
	ctrl     *gomock.Controller
	recorder *MockCatalogServiceMockRecorder
}

// MockCatalogServiceMockRecorder is the mock recorder for MockCatalogService
type MockCatalogServiceMockRecorder struct {
	mock *MockCatalogService
}

// NewMockCatalogService creates a new mock instance
func NewMockCatalogService(ctrl *gomock.Controller) *MockCatalogService {
	mock := &MockCatalogService{ctrl: ctrl}
	mock.recorder = &MockCatalogServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCatalogService) EXPECT() *MockCatalogServiceMockRecorder {
	return m.recorder
}

// GetCatalog mocks base method
func (m *MockCatalogService) GetCatalog() (*models.Catalog, error) {
	ret := m.ctrl.Call(m, "GetCatalog")
	ret0, _ := ret[0].(*models.Catalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCatalog indicates an expected call of GetCatalog
func (mr *MockCatalogServiceMockRecorder) GetCatalog() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCatalog", reflect.TypeOf((*MockCatalogService)(nil).GetCatalog))
}
